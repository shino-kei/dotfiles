[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
hook_source = '''
    let g:deoplete#sources#clang#libclang_path = system("llvm-config --prefix")[:-2] . '/lib/libclang.dylib'
    let g:deoplete#sources#clang#clang_header = system("llvm-config --prefix")[:-2] . '/lib/clang'
    let g:deoplete#sources#clang#sort_algo = 'priority'
    let g:deoplete#sources#clang#clang_complete_database="./build/"
'''
depends = ['deoplete.nvim']

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  " 保存時のみ実行する
  let g:ale_lint_on_text_changed = 0
  " 表示に関する設定
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '⚠'
  let g:airline#extensions#ale#open_lnum_symbol = '('
  let g:airline#extensions#ale#close_lnum_symbol = ')'
  let g:ale_echo_msg_format = '[%linter%]%code: %%s'
  highlight link ALEErrorSign Tagg
  highlight link ALEWarningSign StorageClass
'''
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''

  " 水平に分割する
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error'   : 'quickfix',
        \ 'outputter/buffer/split'  : ':rightbelow 8sp',
        \ 'outputter/buffer/close_on_empty' : 1,
        \ }

  let g:quickrun_config.cpp = {
  \   'command': 'g++',
  \   'cmdopt': '-std=c++11'
  \ }

  " \r でquickfixを閉じて、保存してからquickrunを実行する。
  let g:quickrun_no_default_key_mappings = 1
  nnoremap \q :cclose<CR>:write<CR>:QuickRun -mode n<CR>
  xnoremap \q :<C-U>cclose<CR>:write<CR>gv:QuickRun -mode v<CR>

  " quickrun.vim が実行していない場合には <C-c> を呼び出す
  nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>" 
  nnoremap <silent> <C-q> :QuickRun<CR>
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source = '''
" ファイル一覧
noremap [denite] :Denite file_rec -mode=insert
call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#var('file_rec', 'matchers', ['matcher_fuzzy', 'matcher_ignore_globs'])
call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
      \ ['.git/', '__pycache__/', '*.o', '*.make', '*.min.*'])"
'''   

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'Lokaltog/vim-powerline'